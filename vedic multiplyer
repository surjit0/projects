module vedic_4_x_4(a,b,c);
input [3:0]a;
input [3:0]b;
output [7:0]c;
wire [3:0]q0;
wire [3:0]q1;
wire [3:0]q2;
wire [3:0]q3;
wire [7:0]c;
wire [3:0]temp1;
wire [5:0]temp2;
wire [5:0]temp3;
wire [5:0]temp4;
wire [3:0]q4;
wire [5:0]q5;
wire [5:0]q6;

vedic_2_x_2 z1(a[1:0],b[1:0],q0[3:0]);
vedic_2_x_2 z2(a[3:2],b[1:0],q1[3:0]);
vedic_2_x_2 z3(a[1:0],b[3:2],q2[3:0]);
vedic_2_x_2 z4(a[3:2],b[3:2],q3[3:0]);

assign temp1 ={2'b0,q0[3:2]};
add_4_bit z5(q1[3:0],temp1,q4);
assign temp2 ={2'b0,q2[3:0]};
assign temp3 ={q3[3:0],2'b0};
add_6_bit z6(temp2,temp3,q5);

assign temp4={2'b0,q4[3:0]};
add_6_bit z7(temp4,q5,q6);
assign c[1:0]=q0[1:0];
assign c[7:2]=q6[5:0];
endmodule

2x2

module vedic_2_x_2(a,b,c);
input [1:0]a;
input [1:0]b;
output [3:0]c;
wire [3:0]c;
wire [3:0]temp;
assign c[0]=a[0]&b[0];
assign temp[0]=a[1]&b[0];
assign temp[1]=a[0]&b[1];
assign temp[2]=a[1]&b[1];
ha z1(temp[0],temp[1],c[1],temp[3]);
ha z2(temp[2],temp[3],c[2],c[3]);
endmodule

2X2 inside named ha

module ha(a,b,sum,carry);
input a,b;
output sum,carry;
xor(sum,a,b);
and(carry,a,b);
endmodule

add 4 bit

module add_4_bit(a,b,sum);
input [3:0] a,b;
output [3:0]sum;
assign sum=a+b;
endmodule

add 6 bit

module add_6_bit(a,b,sum);
input [5:0] a,b;
output [5:0] sum;
assign sum = a+b;
endmodule

testbench

module test_vedic_4;
reg [3:0] a;
reg [3:0] b;

wire [7:0] c;

// Instantiate the Unit Under Test (UUT)
vedic_4_x_4 uut (.a(a),.b(b), .c(c));

initial begin
$monitor($time," a= %b, b=%b,  --- c= %b\n",
              a, b, c);
a = 0;
b = 0;
#100
a = 4'b0001;
b = 4'b0010;
#100
a = 4'b0011;
b = 4'b0100;
#100
a = 4'b0101;
b = 4'b0110;
#100
a = 4'b0111;
b = 4'b1000;
#100
a = 4'b1001;
b = 4'b1010;

        end
        endmodule
